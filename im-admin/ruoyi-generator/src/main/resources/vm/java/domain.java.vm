package ${packageName}.domain;

    #foreach ($import in $importList)
    import ${import};
    #end
import lombok.Data;
import lombok.ToString;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import com.ruoyi.common.annotation.Excel;
import org.springframework.format.annotation.DateTimeFormat;
import com.baomidou.mybatisplus.annotation.*; // 新增 MyBatis Plus 注解支持
import java.io.Serializable;

/**
 * ${functionName}对象 ${tableName}
 *
 * @author ${author}
 * @date ${datetime}
 */
@Data
@ToString
@TableName("${tableName}") // 使用 MyBatis Plus 的表名映射
public class ${ClassName} implements Serializable
{
    private static final long serialVersionUID = 1L;

#foreach ($column in $columns)
    #if(!$table.isSuperColumn($column.javaField))
        /** $column.columnComment */
        #if($column.list)
        #set($parentheseIndex=$column.columnComment.indexOf("（"))
        #if($parentheseIndex != -1)
        #set($comment=$column.columnComment.substring(0, $parentheseIndex))
        #else
        #set($comment=$column.columnComment)
        #end
        #if($parentheseIndex != -1)
        @Excel(name = "${comment}", readConverterExp = "$column.readConverterExp()")
        #elseif($column.javaType == 'Date')
        @JsonFormat(pattern = "yyyy-MM-dd")
        @DateTimeFormat(pattern = "yyyy-MM-dd")
        @Excel(name = "${comment}", width = 30, dateFormat = "yyyy-MM-dd")
        #else
        @Excel(name = "${comment}")
        #end
        #end
        #if($column.pk)
        // 如果是主键字段
        @TableId(value = "${column.columnName}", type = IdType.AUTO) // 自动识别主键
        #end
        private $column.javaType $column.javaField;
        #end
    #end

    #if($table.sub)
        /** $table.subTable.functionName信息 */
        private List<${subClassName}> ${subclassName}List;

    #end
    #if($table.sub)
        public List<${subClassName}> get${subClassName}List()
        {
            return ${subclassName}List;
        }

        public void set${subClassName}List(List<${subClassName}> ${subclassName}List)
        {
            this.${subclassName}List = ${subclassName}List;}
    #end

}
